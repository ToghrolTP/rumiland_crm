diff --git a/git_diff.txt b/git_diff.txt
index 6bc03be..e69de29 100644
--- a/git_diff.txt
+++ b/git_diff.txt
@@ -1,1060 +0,0 @@
-diff --git a/git_diff.txt b/git_diff.txt
-index 5edb499..e69de29 100644
---- a/git_diff.txt
-+++ b/git_diff.txt
-@@ -1,1055 +0,0 @@
--diff --git a/static/js/add-customer-form.js b/static/js/add-customer-form.js
--deleted file mode 100644
--index 7b8f157..0000000
----- a/static/js/add-customer-form.js
--+++ /dev/null
--@@ -1,460 +0,0 @@
---// Phone number formatting and validation
---const phoneInput = document.getElementById("phone_number");
---const phoneError = document.getElementById("phone-error");
---const phoneStatus = document.getElementById("phone-status");
---
---// Detect phone type
---function getPhoneType(digits) {
---  if (digits.length === 11 && digits.startsWith("09")) {
---    return "mobile";
---  } else if (digits.length === 11 && digits.startsWith("0")) {
---    return "landline";
---  } else if (digits.length === 10 && digits.startsWith("9")) {
---    return "mobile-no-zero";
---  }
---  return null;
---}
---
---// Format phone number as user types
---phoneInput.addEventListener("input", function (e) {
---  let value = e.target.value.replace(/\D/g, ""); // Remove non-digits
---  let formatted = "";
---
---  const phoneType = getPhoneType(value);
---
---  if (phoneType === "mobile" || phoneType === "mobile-no-zero") {
---    // Mobile format: 0912 345 6789 or 912 345 6789
---    if (phoneType === "mobile-no-zero") {
---      // Add leading zero for display
---      value = "0" + value;
---    }
---
---    if (value.length <= 4) {
---      formatted = value;
---    } else if (value.length <= 7) {
---      formatted = value.slice(0, 4) + " " + value.slice(4);
---    } else {
---      formatted =
---        value.slice(0, 4) + " " + value.slice(4, 7) + " " + value.slice(7, 11);
---    }
---  } else if (phoneType === "landline") {
---    // Check if it's a major city with 3-digit area code
---    const majorCities = [
---      "021",
---      "026",
---      "031",
---      "041",
---      "051",
---      "071",
---      "061",
---      "034",
---    ];
---    const isThreeDigitArea = majorCities.some((code) => value.startsWith(code));
---
---    if (isThreeDigitArea) {
---      // Format: 021 4455 6677
---      if (value.length <= 3) {
---        formatted = value;
---      } else if (value.length <= 7) {
---        formatted = value.slice(0, 3) + " " + value.slice(3);
---      } else {
---        formatted =
---          value.slice(0, 3) +
---          " " +
---          value.slice(3, 7) +
---          " " +
---          value.slice(7, 11);
---      }
---    } else {
---      // Format: 0241 333 4444
---      if (value.length <= 4) {
---        formatted = value;
---      } else if (value.length <= 7) {
---        formatted = value.slice(0, 4) + " " + value.slice(4);
---      } else {
---        formatted =
---          value.slice(0, 4) +
---          " " +
---          value.slice(4, 7) +
---          " " +
---          value.slice(7, 11);
---      }
---    }
---  } else {
---    // Unknown format, just add spaces for readability
---    if (value.length <= 4) {
---      formatted = value;
---    } else if (value.length <= 7) {
---      formatted = value.slice(0, 4) + " " + value.slice(4);
---    } else {
---      formatted =
---        value.slice(0, 4) + " " + value.slice(4, 7) + " " + value.slice(7);
---    }
---  }
---
---  e.target.value = formatted;
---  validatePhone();
---});
---
---// Validate phone number
---function validatePhone() {
---  const value = phoneInput.value.replace(/\D/g, "");
---  let isValid = false;
---  let phoneType = "";
---
---  // Check if it's a valid phone number
---  if (value.length === 11) {
---    if (value.startsWith("09")) {
---      isValid = true;
---      phoneType = "موبایل";
---    } else if (value.startsWith("0")) {
---      isValid = true;
---      phoneType = "ثابت";
---    }
---  } else if (value.length === 10 && value.startsWith("9")) {
---    isValid = true;
---    phoneType = "موبایل";
---  }
---
---  if (value.length === 0) {
---    phoneInput.classList.remove("input-valid", "input-error");
---    phoneError.style.display = "none";
---    phoneStatus.textContent = "";
---    phoneStatus.className = "form-label-badge";
---  } else if (isValid) {
---    phoneInput.classList.add("input-valid");
---    phoneInput.classList.remove("input-error");
---    phoneError.style.display = "none";
---    phoneStatus.textContent = `✓ ${phoneType}`;
---    phoneStatus.className = "form-label-badge badge-success";
---  } else {
---    phoneInput.classList.add("input-error");
---    phoneInput.classList.remove("input-valid");
---    phoneError.style.display = "block";
---    phoneStatus.textContent = "✗ نامعتبر";
---    phoneStatus.className = "form-label-badge badge-error";
---  }
---}
---
---// Prevent form submission if phone is invalid
---document.querySelector("form").addEventListener("submit", function (e) {
---  const value = phoneInput.value.replace(/\D/g, "");
---  let isValid = false;
---
---  if (value.length === 11 && value.startsWith("0")) {
---    isValid = true;
---  } else if (value.length === 10 && value.startsWith("9")) {
---    // Add leading zero before submission
---    phoneInput.value = "0" + value;
---    isValid = true;
---  }
---
---  if (!isValid) {
---    e.preventDefault();
---    phoneInput.focus();
---    validatePhone();
---  }
---});
---
---// Custom validation message in Persian
---phoneInput.addEventListener("invalid", function (e) {
---  e.preventDefault();
---  this.setCustomValidity("لطفاً یک شماره تلفن معتبر وارد کنید");
---});
---
---phoneInput.addEventListener("input", function (e) {
---  this.setCustomValidity("");
---});
---
---// Email validation and suggestions
---const emailInput = document.getElementById("email");
---const emailError = document.getElementById("email-error");
---const emailStatus = document.getElementById("email-status");
---const emailSuggestions = document.getElementById("email-suggestions");
---const emailSuggestionBtn = document.getElementById("email-suggestion");
---
---// Common email domains in Iran
---const commonDomains = [
---  "gmail.com",
---  "yahoo.com",
---  "outlook.com",
---  "hotmail.com",
---  "mail.com",
---  "protonmail.com",
---  "icloud.com",
---  "gmail.ir",
---  "yahoo.ir",
---  "chmail.ir",
---];
---
---// Validate email format
---function isValidEmail(email) {
---  // More comprehensive email regex
---  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
---  return emailRegex.test(email);
---}
---
---// Check for common typos and suggest corrections
---function suggestEmail(email) {
---  if (!email.includes("@")) return null;
---
---  const [localPart, domain] = email.split("@");
---  if (!domain) return null;
---
---  // Common typos
---  const typoMap = {
---    "gmial.com": "gmail.com",
---    "gmai.com": "gmail.com",
---    "gmil.com": "gmail.com",
---    "gmail.co": "gmail.com",
---    "gmail.con": "gmail.com",
---    "gmail.ocm": "gmail.com",
---    "yahoo.co": "yahoo.com",
---    "yahoo.con": "yahoo.com",
---    "yaho.com": "yahoo.com",
---    "yahooo.com": "yahoo.com",
---    "hotmial.com": "hotmail.com",
---    "hotmai.com": "hotmail.com",
---    "hotmil.com": "hotmail.com",
---    "outlok.com": "outlook.com",
---    "outloook.com": "outlook.com",
---  };
---
---  if (typoMap[domain.toLowerCase()]) {
---    return `${localPart}@${typoMap[domain.toLowerCase()]}`;
---  }
---
---  // Check for missing TLD
---  if (!domain.includes(".") && domain.length > 3) {
---    // Try to match with common domains
---    for (const commonDomain of commonDomains) {
---      if (commonDomain.startsWith(domain.toLowerCase())) {
---        return `${localPart}@${commonDomain}`;
---      }
---    }
---  }
---
---  return null;
---}
---
---// Email validation on input
---emailInput.addEventListener("input", function (e) {
---  const email = e.target.value.trim();
---
---  if (email.length === 0) {
---    emailInput.classList.remove("input-valid", "input-error");
---    emailError.style.display = "none";
---    emailStatus.textContent = "";
---    emailStatus.className = "form-label-badge";
---    emailSuggestions.style.display = "none";
---    return;
---  }
---
---  const isValid = isValidEmail(email);
---
---  if (isValid) {
---    emailInput.classList.add("input-valid");
---    emailInput.classList.remove("input-error");
---    emailError.style.display = "none";
---    emailStatus.textContent = "✓ معتبر";
---    emailStatus.className = "form-label-badge badge-success";
---    emailSuggestions.style.display = "none";
---  } else {
---    emailInput.classList.add("input-error");
---    emailInput.classList.remove("input-valid");
---    emailStatus.textContent = "✗ نامعتبر";
---    emailStatus.className = "form-label-badge badge-error";
---
---    // Show error only if user has typed enough
---    if (email.length > 5) {
---      emailError.style.display = "block";
---
---      // Check for suggestions
---      const suggestion = suggestEmail(email);
---      if (suggestion) {
---        emailSuggestionBtn.textContent = suggestion;
---        emailSuggestions.style.display = "block";
---      } else {
---        emailSuggestions.style.display = "none";
---      }
---    }
---  }
---});
---
---// Apply suggestion when clicked
---emailSuggestionBtn.addEventListener("click", function () {
---  emailInput.value = this.textContent;
---  emailInput.dispatchEvent(new Event("input"));
---  emailInput.focus();
---});
---
---// Custom validation messages in Persian
---emailInput.addEventListener("invalid", function (e) {
---  e.preventDefault();
---  const email = this.value.trim();
---
---  if (email.length === 0) {
---    this.setCustomValidity("لطفاً آدرس ایمیل خود را وارد کنید");
---  } else if (!email.includes("@")) {
---    this.setCustomValidity("آدرس ایمیل باید شامل @ باشد");
---  } else if (!email.includes(".")) {
---    this.setCustomValidity(
---      "آدرس ایمیل باید شامل نام دامنه باشد (مثلاً gmail.com)",
---    );
---  } else {
---    this.setCustomValidity("لطفاً یک آدرس ایمیل معتبر وارد کنید");
---  }
---});
---
---emailInput.addEventListener("input", function (e) {
---  this.setCustomValidity("");
---});
---
---// Convert Persian/Arabic characters to English in email
---emailInput.addEventListener("input", function (e) {
---  const persianToEnglish = {
---    "۰": "0",
---    "۱": "1",
---    "۲": "2",
---    "۳": "3",
---    "۴": "4",
---    "۵": "5",
---    "۶": "6",
---    "۷": "7",
---    "۸": "8",
---    "۹": "9",
---    "٠": "0",
---    "١": "1",
---    "٢": "2",
---    "٣": "3",
---    "٤": "4",
---    "٥": "5",
---    "٦": "6",
---    "٧": "7",
---    "٨": "8",
---    "٩": "9",
---    "@": "@",
---    "＠": "@",
---    "٪": "@",
---  };
---
---  let value = e.target.value;
---  let hasChanges = false;
---
---  for (const [persian, english] of Object.entries(persianToEnglish)) {
---    if (value.includes(persian)) {
---      value = value.replace(new RegExp(persian, "g"), english);
---      hasChanges = true;
---    }
---  }
---
---  if (hasChanges) {
---    e.target.value = value;
---  }
---});
---
---// Form submission handling
---const form = document.querySelector("form");
---const submitBtn = document.getElementById("submit-btn");
---const cancelBtn = document.getElementById("cancel-btn");
---const formOverlay = document.getElementById("form-overlay");
---let isSubmitting = false;
---
---// Handle form submission
---form.addEventListener("submit", function (e) {
---  // Prevent multiple submissions
---  if (isSubmitting) {
---    e.preventDefault();
---    return;
---  }
---
---  // Check phone validation first
---  const phoneValue = phoneInput.value.replace(/\D/g, "");
---  let isPhoneValid = false;
---
---  if (phoneValue.length === 11 && phoneValue.startsWith("0")) {
---    isPhoneValid = true;
---  } else if (phoneValue.length === 10 && phoneValue.startsWith("9")) {
---    // Add leading zero before submission
---    phoneInput.value = "0" + phoneValue;
---    isPhoneValid = true;
---  }
---
---  if (!isPhoneValid) {
---    e.preventDefault();
---    phoneInput.focus();
---    validatePhone();
---    return;
---  }
---
---  // Check email validation
---  const emailValue = emailInput.value.trim();
---  if (!isValidEmail(emailValue)) {
---    e.preventDefault();
---    emailInput.focus();
---    return;
---  }
---
---  // Mark as submitting
---  isSubmitting = true;
---
---  // Update button state
---  submitBtn.disabled = true;
---  submitBtn.classList.add("btn-loading-state");
---  submitBtn.querySelector(".btn-content").style.display = "none";
---  submitBtn.querySelector(".btn-loading").style.display = "flex";
---
---  // Disable cancel button
---  cancelBtn.classList.add("btn-disabled");
---  cancelBtn.style.pointerEvents = "none";
---
---  // Show overlay after a slight delay (for better UX)
---  setTimeout(() => {
---    if (isSubmitting) {
---      formOverlay.style.display = "flex";
---
---      // Add progress bar
---      const progressBar = document.createElement("div");
---      progressBar.className = "progress-bar";
---      document.body.appendChild(progressBar);
---    }
---  }, 300);
---
---  // Visual feedback for inputs without disabling
---  const inputs = form.querySelectorAll("input, textarea, select");
---  inputs.forEach((input) => {
---    input.style.opacity = "0.7";
---    input.style.pointerEvents = "none"; // Prevent interaction but keep data
---  });
---});
---
---// Reset form state if user navigates back
---window.addEventListener("pageshow", function (event) {
---  if (event.persisted) {
---    // Page was loaded from cache (back button)
---    isSubmitting = false;
---    submitBtn.disabled = false;
---    submitBtn.classList.remove("btn-loading-state");
---    submitBtn.querySelector(".btn-content").style.display = "flex";
---    submitBtn.querySelector(".btn-loading").style.display = "none";
---    cancelBtn.classList.remove("btn-disabled");
---    cancelBtn.style.pointerEvents = "auto";
---    formOverlay.style.display = "none";
---
---    // Remove any progress bars
---    document.querySelectorAll(".progress-bar").forEach((bar) => bar.remove());
---
---    const inputs = form.querySelectorAll("input, textarea, select");
---    inputs.forEach((input) => {
---      input.style.opacity = "1";
---      input.style.pointerEvents = "auto";
---    });
---  }
---});
---
---$(document).ready(function () {
---  $("#purchase_date").pDatepicker({
---    format: "YYYY/MM/DD",
---    autoClose: true,
---  });
---});
--diff --git a/static/js/edit-customer-form.js b/static/js/edit-customer-form.js
--deleted file mode 100644
--index 43c5232..0000000
----- a/static/js/edit-customer-form.js
--+++ /dev/null
--@@ -1,490 +0,0 @@
---const phoneInput = document.getElementById("phone_number");
---const phoneError = document.getElementById("phone-error");
---const phoneStatus = document.getElementById("phone-status");
---
---function getPhoneType(digits) {
---  if (digits.length === 11 && digits.startsWith("09")) {
---    return "mobile";
---  } else if (digits.length === 11 && digits.startsWith("0")) {
---    return "landline";
---  } else if (digits.length === 10 && digits.startsWith("9")) {
---    return "mobile-no-zero";
---  }
---  return null;
---}
---
---window.addEventListener("DOMContentLoaded", function () {
---  let value = phoneInput.value.replace(/\D/g, "");
---
---  if (value.length === 11) {
---    phoneInput.value = formatPhoneNumber(value);
---    validatePhone();
---  }
---});
---
---function formatPhoneNumber(value) {
---  const phoneType = getPhoneType(value);
---
---  if (phoneType === "mobile") {
---    return (
---      value.slice(0, 4) + " " + value.slice(4, 7) + " " + value.slice(7, 11)
---    );
---  } else if (phoneType === "landline") {
---    const majorCities = [
---      "021",
---      "026",
---      "031",
---      "041",
---      "051",
---      "071",
---      "061",
---      "034",
---    ];
---    const isThreeDigitArea = majorCities.some((code) => value.startsWith(code));
---
---    if (isThreeDigitArea) {
---      return (
---        value.slice(0, 3) + " " + value.slice(3, 7) + " " + value.slice(7, 11)
---      );
---    } else {
---      return (
---        value.slice(0, 4) + " " + value.slice(4, 7) + " " + value.slice(7, 11)
---      );
---    }
---  }
---  return value;
---}
---
---phoneInput.addEventListener("input", function (e) {
---  let value = e.target.value.replace(/\D/g, "");
---  let formatted = "";
---
---  const phoneType = getPhoneType(value);
---
---  if (phoneType === "mobile" || phoneType === "mobile-no-zero") {
---    // Mobile format
---    if (phoneType === "mobile-no-zero") {
---      value = "0" + value;
---    }
---
---    if (value.length <= 4) {
---      formatted = value;
---    } else if (value.length <= 7) {
---      formatted = value.slice(0, 4) + " " + value.slice(4);
---    } else {
---      formatted =
---        value.slice(0, 4) + " " + value.slice(4, 7) + " " + value.slice(7, 11);
---    }
---  } else if (phoneType === "landline") {
---    // Check if it's a major city with 3-digit area code
---    const majorCities = [
---      "021",
---      "026",
---      "031",
---      "041",
---      "051",
---      "071",
---      "061",
---      "034",
---    ];
---    const isThreeDigitArea = majorCities.some((code) => value.startsWith(code));
---
---    if (isThreeDigitArea) {
---      // Format: 021 4455 6677
---      if (value.length <= 3) {
---        formatted = value;
---      } else if (value.length <= 7) {
---        formatted = value.slice(0, 3) + " " + value.slice(3);
---      } else {
---        formatted =
---          value.slice(0, 3) +
---          " " +
---          value.slice(3, 7) +
---          " " +
---          value.slice(7, 11);
---      }
---    } else {
---      // Format: 0241 333 4444
---      if (value.length <= 4) {
---        formatted = value;
---      } else if (value.length <= 7) {
---        formatted = value.slice(0, 4) + " " + value.slice(4);
---      } else {
---        formatted =
---          value.slice(0, 4) +
---          " " +
---          value.slice(4, 7) +
---          " " +
---          value.slice(7, 11);
---      }
---    }
---  } else {
---    // Unknown format
---    if (value.length <= 4) {
---      formatted = value;
---    } else if (value.length <= 7) {
---      formatted = value.slice(0, 4) + " " + value.slice(4);
---    } else {
---      formatted =
---        value.slice(0, 4) + " " + value.slice(4, 7) + " " + value.slice(7);
---    }
---  }
---
---  e.target.value = formatted;
---  validatePhone();
---});
---
---// Validate phone number
---function validatePhone() {
---  const value = phoneInput.value.replace(/\D/g, "");
---  let isValid = false;
---  let phoneType = "";
---
---  if (value.length === 11) {
---    if (value.startsWith("09")) {
---      isValid = true;
---      phoneType = "موبایل";
---    } else if (value.startsWith("0")) {
---      isValid = true;
---      phoneType = "ثابت";
---    }
---  } else if (value.length === 10 && value.startsWith("9")) {
---    isValid = true;
---    phoneType = "موبایل";
---  }
---
---  if (value.length === 0) {
---    phoneInput.classList.remove("input-valid", "input-error");
---    phoneError.style.display = "none";
---    phoneStatus.textContent = "";
---    phoneStatus.className = "form-label-badge";
---  } else if (isValid) {
---    phoneInput.classList.add("input-valid");
---    phoneInput.classList.remove("input-error");
---    phoneError.style.display = "none";
---    phoneStatus.textContent = `✓ ${phoneType}`;
---    phoneStatus.className = "form-label-badge badge-success";
---  } else {
---    phoneInput.classList.add("input-error");
---    phoneInput.classList.remove("input-valid");
---    phoneError.style.display = "block";
---    phoneStatus.textContent = "✗ نامعتبر";
---    phoneStatus.className = "form-label-badge badge-error";
---  }
---}
---
---// Prevent form submission if phone is invalid
---document.querySelector("form").addEventListener("submit", function (e) {
---  const value = phoneInput.value.replace(/\D/g, "");
---  let isValid = false;
---
---  if (value.length === 11 && value.startsWith("0")) {
---    isValid = true;
---  } else if (value.length === 10 && value.startsWith("9")) {
---    // Add leading zero before submission
---    phoneInput.value = "0" + value;
---    isValid = true;
---  }
---
---  if (!isValid) {
---    e.preventDefault();
---    phoneInput.focus();
---    validatePhone();
---  }
---});
---
---// Custom validation message in Persian
---phoneInput.addEventListener("invalid", function (e) {
---  e.preventDefault();
---  this.setCustomValidity("لطفاً یک شماره تلفن معتبر وارد کنید");
---});
---
---phoneInput.addEventListener("input", function (e) {
---  this.setCustomValidity("");
---});
---
---// Email validation and suggestions
---const emailInput = document.getElementById("email");
---const emailError = document.getElementById("email-error");
---const emailStatus = document.getElementById("email-status");
---const emailSuggestions = document.getElementById("email-suggestions");
---const emailSuggestionBtn = document.getElementById("email-suggestion");
---
---// Common email domains
---const commonDomains = [
---  "gmail.com",
---  "yahoo.com",
---  "outlook.com",
---  "hotmail.com",
---  "mail.com",
---  "protonmail.com",
---  "icloud.com",
---  "gmail.ir",
---  "yahoo.ir",
---  "chmail.ir",
---];
---
---// Validate initial email on load
---window.addEventListener("DOMContentLoaded", function () {
---  if (emailInput.value) {
---    emailInput.dispatchEvent(new Event("input"));
---  }
---});
---
---// Validate email format
---function isValidEmail(email) {
---  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
---  return emailRegex.test(email);
---}
---
---// Check for common typos
---function suggestEmail(email) {
---  if (!email.includes("@")) return null;
---
---  const [localPart, domain] = email.split("@");
---  if (!domain) return null;
---
---  const typoMap = {
---    "gmial.com": "gmail.com",
---    "gmai.com": "gmail.com",
---    "gmil.com": "gmail.com",
---    "gmail.co": "gmail.com",
---    "gmail.con": "gmail.com",
---    "gmail.ocm": "gmail.com",
---    "yahoo.co": "yahoo.com",
---    "yahoo.con": "yahoo.com",
---    "yaho.com": "yahoo.com",
---    "yahooo.com": "yahoo.com",
---    "hotmial.com": "hotmail.com",
---    "hotmai.com": "hotmail.com",
---    "hotmil.com": "hotmail.com",
---    "outlok.com": "outlook.com",
---    "outloook.com": "outlook.com",
---  };
---
---  if (typoMap[domain.toLowerCase()]) {
---    return `${localPart}@${typoMap[domain.toLowerCase()]}`;
---  }
---
---  if (!domain.includes(".") && domain.length > 3) {
---    for (const commonDomain of commonDomains) {
---      if (commonDomain.startsWith(domain.toLowerCase())) {
---        return `${localPart}@${commonDomain}`;
---      }
---    }
---  }
---
---  return null;
---}
---
---// Email validation on input
---emailInput.addEventListener("input", function (e) {
---  const email = e.target.value.trim();
---
---  if (email.length === 0) {
---    emailInput.classList.remove("input-valid", "input-error");
---    emailError.style.display = "none";
---    emailStatus.textContent = "";
---    emailStatus.className = "form-label-badge";
---    emailSuggestions.style.display = "none";
---    return;
---  }
---
---  const isValid = isValidEmail(email);
---
---  if (isValid) {
---    emailInput.classList.add("input-valid");
---    emailInput.classList.remove("input-error");
---    emailError.style.display = "none";
---    emailStatus.textContent = "✓ معتبر";
---    emailStatus.className = "form-label-badge badge-success";
---    emailSuggestions.style.display = "none";
---  } else {
---    emailInput.classList.add("input-error");
---    emailInput.classList.remove("input-valid");
---    emailStatus.textContent = "✗ نامعتبر";
---    emailStatus.className = "form-label-badge badge-error";
---
---    if (email.length > 5) {
---      emailError.style.display = "block";
---
---      const suggestion = suggestEmail(email);
---      if (suggestion) {
---        emailSuggestionBtn.textContent = suggestion;
---        emailSuggestions.style.display = "block";
---      } else {
---        emailSuggestions.style.display = "none";
---      }
---    }
---  }
---});
---
---// Apply suggestion
---emailSuggestionBtn.addEventListener("click", function () {
---  emailInput.value = this.textContent;
---  emailInput.dispatchEvent(new Event("input"));
---  emailInput.focus();
---});
---
---// Custom validation messages
---emailInput.addEventListener("invalid", function (e) {
---  e.preventDefault();
---  const email = this.value.trim();
---
---  if (email.length === 0) {
---    this.setCustomValidity("لطفاً آدرس ایمیل خود را وارد کنید");
---  } else if (!email.includes("@")) {
---    this.setCustomValidity("آدرس ایمیل باید شامل @ باشد");
---  } else if (!email.includes(".")) {
---    this.setCustomValidity(
---      "آدرس ایمیل باید شامل نام دامنه باشد (مثلاً gmail.com)",
---    );
---  } else {
---    this.setCustomValidity("لطفاً یک آدرس ایمیل معتبر وارد کنید");
---  }
---});
---
---emailInput.addEventListener("input", function (e) {
---  this.setCustomValidity("");
---});
---
---// Convert Persian/Arabic characters
---emailInput.addEventListener("input", function (e) {
---  const persianToEnglish = {
---    "۰": "0",
---    "۱": "1",
---    "۲": "2",
---    "۳": "3",
---    "۴": "4",
---    "۵": "5",
---    "۶": "6",
---    "۷": "7",
---    "۸": "8",
---    "۹": "9",
---    "٠": "0",
---    "١": "1",
---    "٢": "2",
---    "٣": "3",
---    "٤": "4",
---    "٥": "5",
---    "٦": "6",
---    "٧": "7",
---    "٨": "8",
---    "٩": "9",
---    "@": "@",
---    "＠": "@",
---    "٪": "@",
---  };
---
---  let value = e.target.value;
---  let hasChanges = false;
---
---  for (const [persian, english] of Object.entries(persianToEnglish)) {
---    if (value.includes(persian)) {
---      value = value.replace(new RegExp(persian, "g"), english);
---      hasChanges = true;
---    }
---  }
---
---  if (hasChanges) {
---    e.target.value = value;
---  }
---});
---
---// Form submission handling
---const form = document.querySelector("form");
---const submitBtn = document.getElementById("submit-btn");
---const cancelBtn = document.getElementById("cancel-btn");
---const formOverlay = document.getElementById("form-overlay");
---let isSubmitting = false;
---
---// Handle form submission
---form.addEventListener("submit", function (e) {
---  // Prevent multiple submissions
---  if (isSubmitting) {
---    e.preventDefault();
---    return;
---  }
---
---  // Check phone validation first
---  const phoneValue = phoneInput.value.replace(/\D/g, "");
---  let isPhoneValid = false;
---
---  if (phoneValue.length === 11 && phoneValue.startsWith("0")) {
---    isPhoneValid = true;
---  } else if (phoneValue.length === 10 && phoneValue.startsWith("9")) {
---    // Add leading zero before submission
---    phoneInput.value = "0" + phoneValue;
---    isPhoneValid = true;
---  }
---
---  if (!isPhoneValid) {
---    e.preventDefault();
---    phoneInput.focus();
---    validatePhone();
---    return;
---  }
---
---  // Check email validation
---  const emailValue = emailInput.value.trim();
---  if (!isValidEmail(emailValue)) {
---    e.preventDefault();
---    emailInput.focus();
---    return;
---  }
---
---  // Mark as submitting
---  isSubmitting = true;
---
---  // Update button state
---  submitBtn.disabled = true;
---  submitBtn.classList.add("btn-loading-state");
---  submitBtn.querySelector(".btn-content").style.display = "none";
---  submitBtn.querySelector(".btn-loading").style.display = "flex";
---
---  // Disable cancel button
---  cancelBtn.classList.add("btn-disabled");
---  cancelBtn.style.pointerEvents = "none";
---
---  // Show overlay after a slight delay
---  setTimeout(() => {
---    if (isSubmitting) {
---      formOverlay.style.display = "flex";
---
---      // Add progress bar
---      const progressBar = document.createElement("div");
---      progressBar.className = "progress-bar";
---      document.body.appendChild(progressBar);
---    }
---  }, 300);
---
---  // Visual feedback for inputs without disabling
---  const inputs = form.querySelectorAll("input, textarea, select");
---  inputs.forEach((input) => {
---    input.style.opacity = "0.7";
---    input.style.pointerEvents = "none"; // Prevent interaction but keep data
---  });
---});
---
---// Reset form state if user navigates back
---window.addEventListener("pageshow", function (event) {
---  if (event.persisted) {
---    // Page was loaded from cache (back button)
---    isSubmitting = false;
---    submitBtn.disabled = false;
---    submitBtn.classList.remove("btn-loading-state");
---    submitBtn.querySelector(".btn-content").style.display = "flex";
---    submitBtn.querySelector(".btn-loading").style.display = "none";
---    cancelBtn.classList.remove("btn-disabled");
---    cancelBtn.style.pointerEvents = "auto";
---    formOverlay.style.display = "none";
---
---    document.querySelectorAll(".progress-bar").forEach((bar) => bar.remove());
---
---    const inputs = form.querySelectorAll("input, textarea, select");
---    inputs.forEach((input) => {
---      input.style.opacity = "1";
---      input.style.pointerEvents = "auto";
---    });
---  }
---});
--diff --git a/templates/add.html b/templates/add.html
--index 6a4e757..ddbf635 100644
----- a/templates/add.html
--+++ b/templates/add.html
--@@ -218,7 +218,7 @@ block content %}
-- </div>
-- 
-- {% endblock %} {% block extra_scripts %}
---<script src="/static/js/add-customer-form.js" type="text/javascript"></script>
--+<script src="/static/js/customer-form.js" type="text/javascript"></script>
-- <script type="text/javascript">
--     $(document).ready(function () {
--         $("#purchase_date").pDatepicker({
--diff --git a/templates/detail.html b/templates/detail.html
--index 689c046..0b76d7a 100644
----- a/templates/detail.html
--+++ b/templates/detail.html
--@@ -108,12 +108,12 @@
--         </div>
-- 
--         <div class="detail-row">
---            <label class="detail-label">یادداشت‌ها<label>
--+            <label class="detail-label">یادداشت‌ها</label>
--             <div class="detail-value">
--                 {% if customer.notes.is_empty() %}
---                <span class="text-muted">بدون یادداشت</span>
--+                    <span class="text-muted">بدون یادداشت</span>
--                 {% else %}
---                <div class="detail-notes">{{ customer.notes }}</div>
--+                    <div class="detail-notes">{{ customer.notes }}</div>
--                 {% endif %}
--             </div>
--         </div>
--diff --git a/templates/edit.html b/templates/edit.html
--index d579fa1..c90bc93 100644
----- a/templates/edit.html
--+++ b/templates/edit.html
--@@ -110,17 +110,27 @@ endblock %} {% block content %}
--         
--         <div class="form-group">
--             <label for="sales_count" class="form-label">تعداد فروش</label>
---            <input type="number" id="sales_count" name="sales_count" class="form-input" value="{{ customer.sales_count }}" min="0" required>
--+            <input
--+                type="number"
--+                id="sales_count"
--+                name="sales_count"
--+                class="form-input"
--+                value="{{ customer.sales_count }}"
--+                min="0" required>
--         </div>
--         
--         <div class="form-group">
--             <label for="settlement_method" class="form-label">نحوه تسویه</label>
---            <select id="settlement_method" name="settlement_method" class="form-input">
--+            <select
--+                id="settlement_method"
--+                name="settlement_method"
--+                class="form-input"
--+            >
--                 <option value="" {% if customer.settlement_method.is_empty() %}selected{% endif %}>انتخاب کنید</option>
--                 {% for method_option in methods %}
---                    <option value="{{ method_option.as_str() }}" {% if customer.settlement_method == method_option.as_str() %}selected{% endif %}>
---                        {{ method_option.display_name() }}
---                    </option>
--+                <option value="{{ method_option.as_str() }}" {% if customer.settlement_method == method_option.as_str() %}selected{% endif %}>
--+                    {{ method_option.display_name() }}
--+                </option>
--                 {% endfor %}
--             </select>
--         </div>
--@@ -128,10 +138,12 @@ endblock %} {% block content %}
--         <div class="form-group">
--             <label for="purchase_date" class="form-label">تاریخ خرید</label>
--             <input
---                type="text" id="purchase_date"
--+                type="text"
--+                id="purchase_date"
--                 name="purchase_date"
--                 class="form-input"
---                value="{{ customer.purchase_date }}" autocomplete="off">
--+                value="{{ customer.purchase_date }}"
--+                autocomplete="off">
--         </div>
-- 
--         <div class="form-group">
--@@ -210,5 +222,5 @@ endblock %} {% block content %}
--     </div>
-- </div>
-- 
---<script src="/static/js/edit-customer-form.js" type="text/javascript"></script>
--+<script src="/static/js/customer-form.js" type="text/javascript"></script>
-- {% endblock %}
--\ No newline at end of file
diff --git a/src/db/migrations.rs b/src/db/migrations.rs
index 85d75f6..c8b7046 100644
--- a/src/db/migrations.rs
+++ b/src/db/migrations.rs
@@ -13,7 +13,6 @@ pub async fn run_migrations(pool: &Pool<Sqlite>) -> AppResult<()> {
             email TEXT NOT NULL DEFAULT '',
             phone_number TEXT NOT NULL,
             sales_count INTEGER NOT NULL DEFAULT 0,
-            settlement_method TEXT NOT NULL DEFAULT '',
             purchase_date TEXT NOT NULL DEFAULT '',
             city TEXT NOT NULL DEFAULT '',
             address TEXT NOT NULL DEFAULT '',
@@ -119,11 +118,6 @@ pub async fn run_migrations(pool: &Pool<Sqlite>) -> AppResult<()> {
         .execute(pool)
         .await;
 
-    let _ =
-        sqlx::query("ALTER TABLE customers ADD COLUMN settlement_method TEXT NOT NULL DEFAULT ''")
-            .execute(pool)
-            .await;
-
     let _ = sqlx::query("ALTER TABLE customers ADD COLUMN purchase_date TEXT NOT NULL DEFAULT ''")
         .execute(pool)
         .await;
diff --git a/src/handlers/customers.rs b/src/handlers/customers.rs
index 0764747..0e6b8a5 100644
--- a/src/handlers/customers.rs
+++ b/src/handlers/customers.rs
@@ -71,7 +71,6 @@ pub async fn show_add_form(
         active_page: "add",
         current_user,
         cities: crate::models::City::all_cities(),
-        methods: crate::models::SettlementMethod::all_methods(),
     };
 
     Ok(Html(template.render()?))
@@ -90,7 +89,6 @@ pub async fn add_customer(
     form.job_title = form.job_title.trim().to_string();
     form.address = form.address.trim().to_string();
     form.city = form.city.trim().to_string();
-    form.settlement_method = form.settlement_method.trim().to_string();
 
     // Validate required fields
     if form.full_name.trim().is_empty() {
@@ -125,19 +123,6 @@ pub async fn add_customer(
         ));
     }
 
-    // Validate settlement_method
-    let valid_methods: Vec<String> = crate::models::SettlementMethod::all_methods()
-        .into_iter()
-        .map(|method| method.as_str().to_string())
-        .collect();
-
-    let method_str = form.settlement_method;
-    if !valid_methods.contains(&method_str.to_string()) && !method_str.is_empty() {
-        return Err(AppError::BadRequest(
-            "نحوه تسویه انتخاب شده معتبر نیست".to_string(),
-        ));
-    }
-
     // Validate purchase_date
     let purchase_date_gregorian = if form.purchase_date.is_empty() {
         "".to_string()
@@ -173,26 +158,15 @@ pub async fn add_customer(
         ));
     }
 
-    // Check for duplicate email
-    // let existing: Option<(i64,)> = sqlx::query_as("SELECT id FROM customers WHERE email = ?")
-    //     .bind(&form.email)
-    //     .fetch_optional(&pool)
-    //     .await?;
-
-    // if existing.is_some() {
-    //     return Err(AppError::DuplicateEntry("email".to_string()));
-    // }
-
     sqlx::query(
-        "INSERT INTO customers (full_name, company, email, phone_number, sales_count, settlement_method, purchase_date, job_title, city, address, notes)
-         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
+        "INSERT INTO customers (full_name, company, email, phone_number, sales_count, purchase_date, job_title, city, address, notes)
+         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
     )
     .bind(&form.full_name)
     .bind(&form.company)
     .bind(&form.email)
     .bind(&form.phone_number)
     .bind(&form.sales_count)
-    .bind(method_str)
     .bind(&purchase_date_gregorian)
     .bind(&form.job_title)
     .bind(city_str)
@@ -284,7 +258,6 @@ pub async fn show_edit_form(
         active_page: "",
         current_user,
         cities: crate::models::City::all_cities(),
-        methods: crate::models::SettlementMethod::all_methods(),
     };
 
     Ok(Html(template.render()?))
@@ -321,19 +294,6 @@ pub async fn update_customer(
         ));
     }
 
-    // Validate settlement_method
-    let valid_methods: Vec<String> = crate::models::SettlementMethod::all_methods()
-        .into_iter()
-        .map(|method| method.as_str().to_string())
-        .collect();
-
-    let method_str = form.settlement_method;
-    if !valid_methods.contains(&method_str.to_string()) && !method_str.is_empty() {
-        return Err(AppError::BadRequest(
-            "نحوه تسویه انتخاب شده معتبر نیست".to_string(),
-        ));
-    }
-
     // Validate purchase_date
     let purchase_date_gregorian = if form.purchase_date.is_empty() {
         "".to_string()
@@ -360,7 +320,7 @@ pub async fn update_customer(
 
     let result = sqlx::query(
         "UPDATE customers
-         SET full_name = ?, company = ?, email = ?, phone_number = ?, sales_count = ?, settlement_method = ?, purchase_date = ?, job_title = ?, city = ?, address = ?, notes = ?
+         SET full_name = ?, company = ?, email = ?, phone_number = ?, sales_count = ?, purchase_date = ?, job_title = ?, city = ?, address = ?, notes = ?
          WHERE id = ?"
     )
     .bind(&form.full_name)
@@ -368,7 +328,6 @@ pub async fn update_customer(
     .bind(&form.email)
     .bind(&form.phone_number)
     .bind(&form.sales_count)
-    .bind(method_str)
     .bind(&purchase_date_gregorian)
     .bind(&form.job_title)
     .bind(city_str)
@@ -456,7 +415,6 @@ pub async fn export_customer(State(pool): State<Pool<Sqlite>>) -> AppResult<Resp
         "ایمیل",
         "شماره تلفن",
         "تعداد فروش",
-        "نحوه تسویه",
         "تاریخ خرید",
         "سمت شغلی",
         "شهر",
@@ -476,12 +434,11 @@ pub async fn export_customer(State(pool): State<Pool<Sqlite>>) -> AppResult<Resp
         sheet.write_string(row, 3, &customer.email, None)?;
         sheet.write_string(row, 4, &customer.phone_number, None)?;
         sheet.write_number(row, 5, customer.sales_count as f64, None)?;
-        sheet.write_string(row, 6, &customer.settlement_method_display_name(), None)?;
-        sheet.write_string(row, 7, &customer.purchase_date_shamsi(), None)?;
-        sheet.write_string(row, 8, &customer.job_title, None)?;
-        sheet.write_string(row, 9, &customer.city_display_name(), None)?;
-        sheet.write_string(row, 10, &customer.address, None)?;
-        sheet.write_string(row, 11, &customer.notes, None)?;
+        sheet.write_string(row, 6, &customer.purchase_date_shamsi(), None)?;
+        sheet.write_string(row, 7, &customer.job_title, None)?;
+        sheet.write_string(row, 8, &customer.city_display_name(), None)?;
+        sheet.write_string(row, 9, &customer.address, None)?;
+        sheet.write_string(row, 10, &customer.notes, None)?;
     }
 
     workbook.close()?;
@@ -501,4 +458,4 @@ pub async fn export_customer(State(pool): State<Pool<Sqlite>>) -> AppResult<Resp
     ];
 
     Ok((headers, Body::from(buffer)).into_response())
-}
+}
\ No newline at end of file
diff --git a/src/handlers/transactions.rs b/src/handlers/transactions.rs
index 0684894..ee8c26b 100644
--- a/src/handlers/transactions.rs
+++ b/src/handlers/transactions.rs
@@ -13,7 +13,7 @@ use sqlx::{Pool, Sqlite};
 use crate::{
     error::{AppError, AppResult},
     middleware::auth::get_current_user,
-    models::{Customer, User, TransactionForm},
+    models::{Customer, User, TransactionForm, TransactionType},
     utils::localization::persian_to_english_numbers,
 };
 
@@ -23,6 +23,7 @@ pub struct AddTransactionTemplate {
     pub customer: Customer,
     pub current_user: Option<User>,
     pub active_page: &'static str,
+    pub transaction_types: Vec<TransactionType>,
 }
 
 #[axum::debug_handler]
@@ -43,6 +44,7 @@ pub async fn show_add_transaction_form(
         customer,
         current_user,
         active_page: "",
+        transaction_types: TransactionType::all(),
     };
 
     Ok(Html(template.render()?))
diff --git a/src/models/customer.rs b/src/models/customer.rs
index cf40b92..cc5afef 100644
--- a/src/models/customer.rs
+++ b/src/models/customer.rs
@@ -11,7 +11,6 @@ pub struct Customer {
     pub email: String,
     pub phone_number: String,
     pub sales_count: i64,
-    pub settlement_method: String,
     pub purchase_date: String,
     pub job_title: String,
     pub city: String,
@@ -27,7 +26,6 @@ pub struct CustomerForm {
     pub email: String,
     pub phone_number: String,
     pub sales_count: i64,
-    pub settlement_method: String,
     pub purchase_date: String,
     pub job_title: String,
     pub city: String,
@@ -45,12 +43,6 @@ impl Customer {
         City::from_str(&self.city).display_name().to_string()
     }
 
-    pub fn settlement_method_display_name(&self) -> String {
-        SettlementMethod::from_str(&self.settlement_method)
-            .display_name()
-            .to_string()
-    }
-
     pub fn purchase_date_shamsi(&self) -> String {
         if self.purchase_date.is_empty() {
             return "".to_string();
@@ -120,53 +112,3 @@ impl City {
         }
     }
 }
-
-#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
-pub enum SettlementMethod {
-    Cash,
-    CardTransfer,
-    Cheque,
-    Credit,
-    None,
-}
-
-impl SettlementMethod {
-    pub fn all_methods() -> Vec<SettlementMethod> {
-        vec![
-            SettlementMethod::Cash,
-            SettlementMethod::CardTransfer,
-            SettlementMethod::Cheque,
-            SettlementMethod::Credit,
-        ]
-    }
-
-    pub fn as_str(&self) -> &'static str {
-        match self {
-            SettlementMethod::Cash => "Cash",
-            SettlementMethod::CardTransfer => "CardTransfer",
-            SettlementMethod::Cheque => "Cheque",
-            SettlementMethod::Credit => "Credit",
-            SettlementMethod::None => "",
-        }
-    }
-
-    pub fn from_str(s: &str) -> Self {
-        match s {
-            "Cash" => SettlementMethod::Cash,
-            "CardTransfer" => SettlementMethod::CardTransfer,
-            "Cheque" => SettlementMethod::Cheque,
-            "Credit" => SettlementMethod::Credit,
-            _ => SettlementMethod::None,
-        }
-    }
-
-    pub fn display_name(&self) -> &'static str {
-        match self {
-            SettlementMethod::Cash => "نقدی",
-            SettlementMethod::CardTransfer => "کارت به کارت",
-            SettlementMethod::Cheque => "چک",
-            SettlementMethod::Credit => "اعتباری",
-            SettlementMethod::None => "انتخاب کنید",
-        }
-    }
-}
diff --git a/src/models/mod.rs b/src/models/mod.rs
index 3ac0931..c4f2373 100644
--- a/src/models/mod.rs
+++ b/src/models/mod.rs
@@ -4,8 +4,8 @@ pub mod session;
 pub mod transactions;
 pub mod user;
 
-pub use customer::{City, Customer, CustomerForm, SettlementMethod};
+pub use customer::{City, Customer, CustomerForm};
 pub use product::{Product, ProductForm};
 pub use session::Session;
-pub use transactions::{Transaction, TransactionForm};
+pub use transactions::{Transaction, TransactionForm, TransactionType};
 pub use user::{LoginForm, User, UserForm};
diff --git a/src/models/session.rs b/src/models/session.rs
index 73347bc..85f13ab 100644
--- a/src/models/session.rs
+++ b/src/models/session.rs
@@ -1,7 +1,6 @@
 use serde::{Deserialize, Serialize};
 use sqlx::FromRow;
 
-/// Session entity for user authentication
 #[derive(Debug, Clone, Serialize, Deserialize, FromRow)]
 pub struct Session {
     pub id: String,
@@ -15,7 +14,6 @@ impl Session {
         uuid::Uuid::new_v4().to_string()
     }
 
-    /// Create expiry timestamp (24 hours from now)
     pub fn generate_expiry() -> String {
         use chrono::{Duration, Utc};
         (Utc::now() + Duration::hours(24)).to_rfc3339()
diff --git a/src/models/transactions.rs b/src/models/transactions.rs
index 9f3f8d5..a900593 100644
--- a/src/models/transactions.rs
+++ b/src/models/transactions.rs
@@ -34,6 +34,12 @@ impl Transaction {
             Err(_) => self.transaction_date.clone(),
         }
     }
+    
+    pub fn transaction_type_display_name(&self) -> String {
+        TransactionType::from_str(&self.transaction_type)
+            .display_name()
+            .to_string()
+    }
 }
 
 #[derive(Debug, Deserialize)]
@@ -43,3 +49,54 @@ pub struct TransactionForm {
     pub description: Option<String>,
     pub transaction_date: String,
 }
+
+#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
+pub enum TransactionType {
+    Cash,
+    CardTransfer,
+    Cheque,
+    Credit,
+    Other,
+}
+
+impl TransactionType {
+    pub fn all() -> Vec<TransactionType> {
+        vec![
+            TransactionType::Cash,
+            TransactionType::CardTransfer,
+            TransactionType::Cheque,
+            TransactionType::Credit,
+            TransactionType::Other,
+        ]
+    }
+
+    pub fn as_str(&self) -> &'static str {
+        match self {
+            TransactionType::Cash => "Cash",
+            TransactionType::CardTransfer => "CardTransfer",
+            TransactionType::Cheque => "Cheque",
+            TransactionType::Credit => "Credit",
+            TransactionType::Other => "Other",
+        }
+    }
+
+    pub fn from_str(s: &str) -> Self {
+        match s {
+            "Cash" => TransactionType::Cash,
+            "CardTransfer" => TransactionType::CardTransfer,
+            "Cheque" => TransactionType::Cheque,
+            "Credit" => TransactionType::Credit,
+            _ => TransactionType::Other,
+        }
+    }
+
+    pub fn display_name(&self) -> &'static str {
+        match self {
+            TransactionType::Cash => "نقدی",
+            TransactionType::CardTransfer => "کارت به کارت",
+            TransactionType::Cheque => "چک",
+            TransactionType::Credit => "اعتباری",
+            TransactionType::Other => "سایر",
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/templates/customers.rs b/src/templates/customers.rs
index 9fc3c40..4e6347a 100644
--- a/src/templates/customers.rs
+++ b/src/templates/customers.rs
@@ -18,7 +18,6 @@ pub struct AddTemplate {
     pub active_page: &'static str,
     pub current_user: Option<User>,
     pub cities: Vec<crate::models::City>,
-    pub methods: Vec<crate::models::SettlementMethod>,
     // pub batch_count: i32,
 }
 
@@ -41,5 +40,4 @@ pub struct EditTemplate {
     pub active_page: &'static str,
     pub current_user: Option<User>,
     pub cities: Vec<crate::models::City>,
-    pub methods: Vec<crate::models::SettlementMethod>,
 }
diff --git a/templates/add.html b/templates/add.html
index 9deb580..e1c7867 100644
--- a/templates/add.html
+++ b/templates/add.html
@@ -115,22 +115,6 @@ block content %}
             />
         </div>
 
-        <div class="form-group">
-            <label for="settlement_method" class="form-label">نحوه تسویه</label>
-            <select
-                id="settlement_method"
-                name="settlement_method"
-                class="form-input"
-            >
-                <option value="">انتخاب کنید</option>
-                {% for method in methods %}
-                <option value="{{ method.as_str() }}">
-                    {{ method.display_name() }}
-                </option>
-                {% endfor %}
-            </select>
-        </div>
-
         <div class="form-group">
             <label for="purchase_date" class="form_label">تاریخ خرید</label>
             <input
diff --git a/templates/add_transaction.html b/templates/add_transaction.html
index 5e40496..89eae58 100644
--- a/templates/add_transaction.html
+++ b/templates/add_transaction.html
@@ -24,14 +24,11 @@
 
         <div class="form-group">
             <label for="transaction_type" class="form-label">نوع تراکنش *</label>
-            <input
-                type="text"
-                id="transaction_type"
-                name="transaction_type"
-                class="form-input"
-                placeholder="مثال: واریز"
-                required
-            />
+            <select id="transaction_type" name="transaction_type" class="form-input" required>
+                {% for type in transaction_types %}
+                <option value="{{ type.as_str() }}">{{ type.display_name() }}</option>
+                {% endfor %}
+            </select>
         </div>
 
         <div class="form-group">
diff --git a/templates/detail.html b/templates/detail.html
index 799ae70..09c9ecd 100644
--- a/templates/detail.html
+++ b/templates/detail.html
@@ -68,11 +68,6 @@
             <div class="detail-value">{{ customer.sales_count }}</div>
         </div>
         
-        <div class="detail-row">
-            <label class="detail-label">نحوه تسویه</label>
-            <div class="detail-value">{{ customer.settlement_method_display_name() }}</div>
-        </div>
-        
         <div class="detail-row">
             <label class="detail-label">تاریخ خرید</label>
             <div class="detail-value">
@@ -197,7 +192,7 @@
                 {% for transaction in transactions %}
                 <tr>
                     <td class="auto-fit">{{ transaction.formatted_date_shamsi() }}</td>
-                    <td>{{ transaction.transaction_type }}</td>
+                    <td>{{ transaction.transaction_type_display_name() }}</td>
                     <td class="auto-fit">
                         <span>{{ transaction.formatted_amount() }}</span>
                     </td>
diff --git a/templates/edit.html b/templates/edit.html
index 9f9be4a..bd4a04b 100644
--- a/templates/edit.html
+++ b/templates/edit.html
@@ -118,22 +118,6 @@ endblock %} {% block content %}
                 min="0" required>
         </div>
         
-        <div class="form-group">
-            <label for="settlement_method" class="form-label">نحوه تسویه</label>
-            <select
-                id="settlement_method"
-                name="settlement_method"
-                class="form-input"
-            >
-                <option value="" {% if customer.settlement_method.is_empty() %}selected{% endif %}>انتخاب کنید</option>
-                {% for method_option in methods %}
-                <option value="{{ method_option.as_str() }}" {% if customer.settlement_method == method_option.as_str() %}selected{% endif %}>
-                    {{ method_option.display_name() }}
-                </option>
-                {% endfor %}
-            </select>
-        </div>
-        
         <div class="form-group">
             <label for="purchase_date" class="form-label">تاریخ خرید</label>
             <input
diff --git a/templates/list.html b/templates/list.html
index 176ea51..a93a3fb 100644
--- a/templates/list.html
+++ b/templates/list.html
@@ -63,7 +63,6 @@ content %}
                 <!-- <th>ایمیل</th> -->
                 <th>تلفن</th>
                 <th>تعداد فروش</th>
-                <th>نحوه تسویه</th>
                 <th>تاریخ خرید</th>
                 <th>سمت شغلی</th>
                 <th>آدرس</th>
@@ -86,7 +85,6 @@ content %}
                     <span class="phone-number text-small">{{ customer.formatted_phone() }}</span>
                 </td>
                 <td class="auto-fit">{{ customer.sales_count }}</td>
-                <td class="auto-fit">{{ customer.settlement_method_display_name() }}</td>
                 <td class="auto-fit">
                     {% if customer.purchase_date.is_empty() %}
                         <span class="text-muted">--</span>
